#!/usr/bin/env -S deno run --allow-read --allow-write
// # vim: ft=typescript

import { Command } from "jsr:@cliffy/command@^1.0.0-rc.8";
import { exists } from "jsr:@std/fs";

const ModuleFiles = [
  "fetchers.ts",
  "mod.ts",
  "mod_test.ts",
  "request_builders.ts",
  "requests.ts",
  "response_handlers.ts",
  "types.ts",
  "validation.ts",
];

const createModule = new Command()
  .description("Generpte directory and files for a new SJVAir SDK module")
  .alias("c")
  .arguments("<moduleName...:string>")
  .action(async (_, ...modulePath) => {
    const modules = modulePath.map((module) => ({
      path: `${import.meta.dirname}/lib/${module}`,
      name: module,
    }));

    for (const mod of modules) {
      if (await exists(mod.path)) {
        console.error(`Skipping "${mod.name}", directory already exists`);
        continue;
      }

      await Deno.mkdir(mod.path, { recursive: true });

      for (const file of ModuleFiles) {
        await Deno.create(`${mod.path}/${file}`);
      }
    }
  });

export const moduleManager = new Command()
  .alias("mod")
  .description("SDK Module Utilities")
  .command("create", createModule);

const commands = new Command()
  .command("module", moduleManager);

await commands.parse(Deno.args);
